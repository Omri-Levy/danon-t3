import { NextPage } from 'next';
import Head from 'next/head';
import { Map } from '../components/atoms/Map/Map';
import { createSuppliersApi } from '../api/suppliers-api';
import { useToggle } from 'react-use';
import { CreateSupplierModal } from '../components/organisms/CreateSupplierModal/CreateSupplierModal';
import { Fragment, useMemo } from 'react';
import { locale } from '../translations';
import { useSet } from '../hooks/useSet/useSet';
import { updateSupplierSchema } from '../server/suppliers/validation';
import Link from 'next/link';
import { EditableInput } from '../components/atoms/EditableInput/EditableInput';
import clsx from 'clsx';
import { trpc } from '../utils/trpc';
import { toast } from 'react-hot-toast';
import { formatErrors } from '../env/client.mjs';

const Suppliers: NextPage = () => {
	const suppliersApi = createSuppliersApi();
	const { suppliers } = suppliersApi.getAll();
	const { onUpdateById } = suppliersApi.updateById();
	const [isOpen, toggleIsOpen] = useToggle(false);
	const [selectedSupplierIds, actions] = useSet<string>();
	const { onDeleteByIds, isLoading: isLoadingDeleteByIds } =
		suppliersApi.deleteByIds<Array<string>>(actions.arrayToSet);
	const onSelectSupplierId = (id: string) => () =>
		actions.toggle(id);
	const allSupplierIds = new Set(
		suppliers?.map((supplier) => supplier.id) ?? [],
	);
	const onSelectAllSupplierIds = () =>
		actions.toggleAll(allSupplierIds);
	const onDeleteSelectedSuppliers = () => {
		onDeleteByIds({
			ids: actions.array(),
		});
		actions.clear();
	};
	const isAllSupplierIdsSelected = useMemo(
		() =>
			allSupplierIds.size > 0 &&
			selectedSupplierIds.size > 0 &&
			[...allSupplierIds].every((id) =>
				selectedSupplierIds.has(id),
			),
		[selectedSupplierIds, allSupplierIds],
	);
	const isMutating = trpc.useContext().queryClient.isMutating();

	return (
		<div>
			<Head>
				<title>Danon Ordering System</title>
				<meta
					name='description'
					content='Generated by create-t3-app'
				/>
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className='container pt-[7vh] min-h-screen p-2 mx-auto'>
				{!!isMutating && (
					<svg
						xmlns='http://www.w3.org/2000/svg'
						fill='none'
						viewBox='0 0 24 24'
						strokeWidth={1.5}
						stroke='currentColor'
						className='w-6 h-6 animate-spin absolute bottom-5 left-5'
					>
						<path
							strokeLinecap='round'
							strokeLinejoin='round'
							d='M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99'
						/>
					</svg>
				)}
				<div className={`flex justify-between mb-2`}>
					<div className={`space-x-2`}>
						<Link href={'/'} passHref>
							<a className={'btn'}>
								{locale.he.products}
							</a>
						</Link>
						<CreateSupplierModal
							isOpen={isOpen}
							onOpen={toggleIsOpen}
						/>
						<button
							disabled={
								!suppliers?.length ||
								!selectedSupplierIds.size ||
								isLoadingDeleteByIds
							}
							className={clsx([
								'btn',
								{ loading: isLoadingDeleteByIds },
							])}
							onClick={onDeleteSelectedSuppliers}
						>
							{locale.he.delete}
						</button>
					</div>
					<div className={`flex space-x-2`}>
						<Link href={`/api/auth/signout`}>
							<a className={`btn`}>
								{locale.he.signOut}
							</a>
						</Link>
					</div>
				</div>
				<ul
					className={`menu p-1 border border-neutral/25 rounded`}
				>
					<li
						className={`menu-title text-center font-bold`}
					>
						{locale.he.suppliers}
					</li>
					<li>
						<div
							className={`hover:!bg-base-100 cursor-auto`}
						>
							<input
								type={`checkbox`}
								className={`checkbox ml-auto`}
								onChange={onSelectAllSupplierIds}
								checked={isAllSupplierIdsSelected}
							/>
						</div>
					</li>
					<Map
						items={suppliers ?? []}
						render={({ id, name, email }) => (
							<Fragment key={id}>
								<li className={`hover-bordered`}>
									<div
										className={`flex justify-between active:bg-neutral-focus/10 active:text-base-content`}
									>
										<div>
											<div>
												Name:{' '}
												<EditableInput
													type={`name`}
													initialValue={
														name
													}
													onEdit={async (
														value,
													) => {
														const {
															name,
														} = updateSupplierSchema
															.pick({
																name: true,
															})
															.parse({
																name: value,
															});

														await onUpdateById(
															{
																id,
																name,
															},
														);
													}}
												/>
											</div>
											<div>
												Email:{' '}
												<EditableInput
													initialValue={
														email
													}
													onEdit={async (
														value,
													) => {
														const result =
															updateSupplierSchema
																.pick(
																	{
																		email: true,
																	},
																)
																.safeParse(
																	{
																		email: value,
																	},
																);

														if (
															!result.success
														) {
															const error =
																formatErrors(
																	result.error.format(),
																);

															toast.error(
																`${locale.he.actions.error} ${error}`,
															);

															return;
														}

														const {
															data: {
																email,
															},
														} = result;

														await onUpdateById(
															{
																id,
																email,
															},
														);
													}}
													type={`email`}
												/>
											</div>
										</div>
										<input
											type={`checkbox`}
											className={`checkbox`}
											onChange={onSelectSupplierId(
												id,
											)}
											checked={selectedSupplierIds.has(
												id,
											)}
										/>
									</div>
								</li>
								<div className={`divider p-1`} />
							</Fragment>
						)}
					/>
				</ul>
			</main>
		</div>
	);
};

export default Suppliers;
