import { z } from 'zod';
import * as imports from './translations';
import { Unit } from './enums';

// Avoids circular imports

export const supplierSchema = z.object({
	/**
	 * The unique identifier for the supplier
	 * @default {Generated by database}
	 */
	id: z.string(),
	email: z
		.string()
		.max(320, {
			message: imports.locale.he.validation.supplier.email.max,
		})
		.email({
			message:
				imports.locale.he.validation.supplier.email.invalid,
		}),
	name: z
		.string()
		.max(120, {
			message: imports.locale.he.validation.supplier.name.max,
		})
		.min(1, {
			message: imports.locale.he.validation.supplier.name.min,
		}),
	createdAt: z.date(),
	updatedAt: z.date(),
});

export const productSchema = z.object({
	sku: z
		.string()
		.min(1, {
			message: imports.locale.he.validation.product.sku.min,
		})
		.max(10, {
			message: imports.locale.he.validation.product.sku.max,
		}),
	name: z
		.string()
		.min(1, {
			message: imports.locale.he.validation.product.name.min,
		})
		.max(120, {
			message: imports.locale.he.validation.product.name.max,
		}),
	packageSize: z
		.number()
		.min(1, {
			message:
				imports.locale.he.validation.product.packageSize.min,
		})
		.max(1000, {
			message:
				imports.locale.he.validation.product.packageSize.max,
		}),
	unit: z.nativeEnum(Unit),
	orderAmount: z
		.number()
		.min(0, {
			message:
				imports.locale.he.validation.product.orderAmount.min,
		})
		.max(1000, {
			message:
				imports.locale.he.validation.product.orderAmount.max,
		}),
	stock: z
		.number()
		.min(0, {
			message: imports.locale.he.validation.product.stock.min,
		})
		.max(1000, {
			message: imports.locale.he.validation.product.stock.max,
		}),
	supplierId: z.string(),
	orderId: z.string().nullish(),
	createdAt: z.date(),
	updatedAt: z.date(),
});
export const orderSchema = z.object({
	/**
	 * The unique identifier for the supplier
	 * @default {Generated by database}
	 */
	id: z.string(),
	orderNumber: z.number().int(),
	supplierId: z.string(),
	s3Key: z.string(),
	createdAt: z.date(),
	updatedAt: z.date(),
});
export const idSchema = z.object({
	id: z.string(),
});
export const idsSchema = z.object({
	ids: z.array(idSchema.shape.id),
});
