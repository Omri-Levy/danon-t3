// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel            = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase                = "camelCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix              = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//  imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model Supplier {
    /// The unique identifier for the supplier
    /// @default {Generated by database}
    id String @id @default(cuid())
    /// @zod.max(320, { message: "Email must contain at most 320 character(s)" })
    /// @zod.email("Email must be a valid email address")
    email String @db.VarChar(320) @unique
    /// @zod.max(120, { message: "Supplier name must contain at most 120 character(s)" })
    /// @zod.min(1, { message: "Supplier name must contain at least 1 character(s)" })
    name String @db.VarChar(120)
    products Product[]
    orders Order[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Product {
    /// The unique identifier for the supplier
    /// @default {Generated by database}
    id String @id @default(cuid())
    /// @zod.max(10, { message: "SKU must contain at most 10 character(s)" })
    /// @zod.min(1, { message: "SKU must contain at most 1 character(s)" })
    sku String @db.VarChar(10) @unique
    /// @zod.max(120, { message: "Product name must contain at most 120 character(s)" })
    /// @zod.min(1, { message: "Product name must contain at least 1 character(s)" })
    name String @db.VarChar(120)
    /// @zod.max(1000, { message: "Package size must be lower or equal to 1000" })
    packageSize Decimal @db.Decimal(6,2)
    unit Unit
    /// @zod.max(1000, { message: "Order amount must be lower or equal to 1000" })
    orderAmount Decimal @db.Decimal(6,2)
    /// @zod.max(1000, { message: "Stock amount must be lower or equal to 1000" })
    stock Decimal @db.Decimal(6,2)
    supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
    supplierId String
    order Order? @relation(fields: [orderId], references: [id])
    orderId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([orderAmount(sort: Asc), sku])
}

model Order {
    /// The unique identifier for the supplier
    /// @default {Generated by database}
    id String @id @default(cuid())
    orderNumber Int @db.Int @default(autoincrement())
    products Product[]
    supplier Supplier @relation(fields: [supplierId], references: [id])
    supplierId String
    s3Bucket String @db.VarChar(320)
    s3Key String @db.VarChar(320)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index(fields: [orderNumber], name: "order_number_idx")
}

enum Unit {
    KG
    G
    L
    UN
    CC
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    ext_expires_in Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([identifier, token])
}
