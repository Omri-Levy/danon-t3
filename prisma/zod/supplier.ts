import * as z from 'zod';

import {
	CompleteOrder,
	CompleteProduct,
	RelatedOrderModel,
	RelatedProductModel,
} from './index';

export const SupplierModel = z.object({
	/**
	 * The unique identifier for the supplier
	 * @default {Generated by database}
	 */
	id: z.string(),
	email: z
		.string()
		.max(320, {
			message: 'Email must contain at most 320 character(s)',
		})
		.email('Email must be a valid email address'),
	name: z
		.string()
		.max(120, {
			message:
				'Supplier name must contain at most 120 character(s)',
		}),
	createdAt: z.date(),
	updatedAt: z.date(),
});

export interface CompleteSupplier
	extends z.infer<typeof SupplierModel> {
	products: CompleteProduct[];
	orders: CompleteOrder[];
}

/**
 * RelatedSupplierModel contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const RelatedSupplierModel: z.ZodSchema<CompleteSupplier> =
	z.lazy(() =>
		SupplierModel.extend({
			products: RelatedProductModel.array(),
			orders: RelatedOrderModel.array(),
		}),
	);
