import * as z from 'zod';
import {
	CompleteOrder,
	CompleteProduct,
	relatedOrderSchema,
	relatedProductSchema,
} from './index';
import { locale } from '../../src/translations';

export const supplierSchema = z.object({
	/**
	 * The unique identifier for the supplier
	 * @default {Generated by database}
	 */
	id: z.string(),
	email: z
		.string()
		.email(locale.he.validation.supplier.email.invalid)
		.max(320, {
			message: locale.he.validation.supplier.email.max,
		}),
	name: z
		.string()
		.min(1, {
			message: locale.he.validation.supplier.name.min,
		})
		.max(120, {
			message: locale.he.validation.supplier.name.max,
		}),
	createdAt: z.date(),
	updatedAt: z.date(),
});

export interface CompleteSupplier
	extends z.infer<typeof supplierSchema> {
	products: CompleteProduct[];
	orders: CompleteOrder[];
}

/**
 * relatedSupplierSchema contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const relatedSupplierSchema: z.ZodSchema<CompleteSupplier> =
	z.lazy(() =>
		supplierSchema.extend({
			products: relatedProductSchema.array(),
			orders: relatedOrderSchema.array(),
		}),
	);
