import * as z from "zod"
import * as imports from "../../src/translations"
import { CompleteProduct, relatedProductSchema, CompleteOrder, relatedOrderSchema } from "./index"

export const supplierSchema = z.object({
  /**
   * The unique identifier for the supplier
   * @default {Generated by database}
   */
  id: z.string(),
  email: z.string().max(320, { message: imports.locale.he.validation.supplier.email.max }).email({ message: imports.locale.he.validation.supplier.email.invalid }),
  name: z.string().max(120, { message: imports.locale.he.validation.supplier.name.max }).min(1, { message: imports.locale.he.validation.supplier.name.min }),
  createdAt: z.date(),
  updatedAt: z.date(),
})

export interface CompleteSupplier extends z.infer<typeof supplierSchema> {
  products: CompleteProduct[]
  orders: CompleteOrder[]
}

/**
 * relatedSupplierSchema contains all relations on your model in addition to the scalars
 *
 * NOTE: Lazy required in case of potential circular dependencies within schema
 */
export const relatedSupplierSchema: z.ZodSchema<CompleteSupplier> = z.lazy(() => supplierSchema.extend({
  products: relatedProductSchema.array(),
  orders: relatedOrderSchema.array(),
}))
